[{"path":"https://garcia-ho.github.io/ScuRMST/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Jiashan Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/articles/introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction_to_ScuRMST","text":"ScuRMST package used Sculpted RMST Two Stages Double-arm Clinical Trial Design.\\ Sculpted refers defined critical region necessitates significant difference RMST groups large absolute value RMST experimental group order declare treatment effective.\\ information technical details can found https://github.com/garcia-ho/RMST_Code.git","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/articles/introduction.html","id":"installation","dir":"Articles","previous_headings":"Introduction","what":"Installation","title":"Introduction_to_ScuRMST","text":"install ScuRMST package CRAN, use following command:","code":"install.packages(\"ScuRMST\") devtools::install_github(\"garcia-ho/ScuRMST.git\")  library(ScuRMST)"},{"path":"https://garcia-ho.github.io/ScuRMST/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jiashan . Author, maintainer.","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"J (2024). ScuRMST: Two Stages Double-arm Clinical Trial Design Using Sculpted Critical Region RMST. R package version 0.1.0, https://garcia-ho.github.io/ScuRMST.","code":"@Manual{,   title = {ScuRMST: Two Stages Double-arm Clinical Trial Design Using Sculpted Critical Region of RMST},   author = {Jiashan He},   year = {2024},   note = {R package version 0.1.0},   url = {https://garcia-ho.github.io/ScuRMST}, }"},{"path":[]},{"path":[]},{"path":"https://garcia-ho.github.io/ScuRMST/index.html","id":"flow-chart-of-sculpted-rmst-design","dir":"","previous_headings":"Overview","what":"Flow Chart of Sculpted RMST design","title":"Two Stages Double-arm Clinical Trial Design Using Sculpted Critical Region of RMST","text":"ScuRMST package used Sculpted RMST Two Stages Double-arm Clinical Trial Design. Sculpted refers defined critical region necessitates significant difference RMST groups large absolute value RMST experimental group order declare treatment effective. information technical details can found GitHub repository","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Two Stages Double-arm Clinical Trial Design Using Sculpted Critical Region of RMST","text":"can install development version ScuRMST GitHub :","code":"# Install devtools if you haven't already install.packages(\"devtools\")  # Install ScuRMST from GitHub devtools::install_github(\"garcia-ho/ScuRMST\")"},{"path":[]},{"path":"https://garcia-ho.github.io/ScuRMST/index.html","id":"given-total-sample-size-n-and-interim-sample-size-n","dir":"","previous_headings":"Features & Examples","what":"Given Total sample size N and interim sample size n","title":"Two Stages Double-arm Clinical Trial Design Using Sculpted Critical Region of RMST","text":"Example 1: Searching powerful design (critical values) Sculpted RMST α≤0.05\\alpha \\leq 0.05 Example 2: Searching suitable designs α≤0.05\\alpha \\leq 0.05, power > 0.8.","code":"sim_size <- 5000   N <- 100  r <- 60  acc_time <- N / r  cen_time <- 1  lambda_H1 <- 0.9  HR <- 1.7  lambda_H0 <- 0.9 * 1.7  change_time <- 1  interim <- 0.6 * acc_time  n <- ceiling(N / 2)  alpha <- 0.05  tau_f <- 2.5    # Generate data for control arm (C) and experimental arm (E) under H0 and H1  data_C <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                              lambda = lambda_H0, dist = 'exp',                              cen_time = cen_time, arm = 0, interim = interim)  data_E_H0 <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                              lambda = lambda_H0, dist = 'exp',                             cen_time = cen_time, arm = 1, interim = interim)  data_E_H1 <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                              lambda = lambda_H1, dist = 'exp',                              cen_time = cen_time, arm = 1, interim = interim)   # Calculate RMST data for interim and final stages under H0 and H1  rmst_h0_int <- RMST_sim_cal(n = n, data_E = data_E_H0[ , c(2,3,1)],                  data_C = data_C[ , c(2,3,1)], tau = interim, sim_size = sim_size)  rmst_h0_fin <- RMST_sim_cal(n = n, data_E = data_E_H0[ , c(4,5,1)],                  data_C = data_C[ , c(4,5,1)], tau = tau_f, sim_size = sim_size)  rmst_h1_int <- RMST_sim_cal(n = n, data_E = data_E_H1[ , c(2,3,1)],                  data_C = data_C[ , c(2,3,1)], tau = interim, sim_size = sim_size)  rmst_h1_fin <- RMST_sim_cal(n = n, data_E = data_E_H1[ , c(4,5,1)],                  data_C = data_C[ , c(4,5,1)], tau = tau_f, sim_size = sim_size)  # Combine RMST data  rmst_data <- rbind(rmst_h0_int, rmst_h1_int, rmst_h0_fin, rmst_h1_fin)   # Calculate variance-covariance matrices under H0 and H1  mu_cov_h0 <- mu_cov_mc(rmst_int = rmst_h0_int, rmst_fin = rmst_h0_fin, sim_size = sim_size)  mu_cov_h1 <- mu_cov_mc(rmst_int = rmst_h1_int, rmst_fin = rmst_h1_fin, sim_size = sim_size)   # Perform adaptive grid search for the best RMST design  best_RMST <- adp_grid_src(rmst_data = rmst_data, mu_cov_h0 = mu_cov_h0,                  mu_cov_h1 = mu_cov_h1, int_n = interim * r, fin_n = 2 * n,                  alpha = 0.05, sim_size = sim_size, method = 'Complex') power <- 0.8 best_RMST <- adp_grid_src(rmst_data = rmst_data, mu_cov_h0 = mu_cov_h0,                 mu_cov_h1 = mu_cov_h1, int_n = interim * r, fin_n = 2 * n,                 alpha = 0.05, power = 0.8, sim_size = sim_size, method = 'Complex')"},{"path":"https://garcia-ho.github.io/ScuRMST/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Two Stages Double-arm Clinical Trial Design Using Sculpted Critical Region of RMST","text":"questions, suggestions, feedback, please reach : Email: gaaisin@connect.hku.hk GitHub Issues: can open issue GitHub repository.","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/PET_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability of early termination using normal density — PET_norm","title":"Probability of early termination using normal density — PET_norm","text":"returns c(PET0, PET1), PET0 = prob(E-C>m1 & E>t1|H0) using bivariate normal density. Input estimated RMST mean variance group (control experiment) critical value (m1,t1)","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/PET_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability of early termination using normal density — PET_norm","text":"","code":"PET_norm(mu_c, var_c, mu_e, var_e, m1, t1)"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/PET_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability of early termination using normal density — PET_norm","text":"mu_c Mean control group. var_c Variance control group. mu_e Mean experimental group. var_e Variance experimental group. m1 Threshold RMST difference E-C interim analysis. t1 Time point Experimental group RMST E interim analysis.","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/PET_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability of early termination using normal density — PET_norm","text":"Probability Early Termination (PET).","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/RMST_sim_cal.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of RMST values in each group — RMST_sim_cal","title":"Estimation of RMST values in each group — RMST_sim_cal","text":"function estimate RMST values arm based generated survival data. returns 2 * sim_size matrix. First row control group, second one experiment group. guaranteed maximum simulated survival time larger tau. Please refer parameter 'tau' survRM2 package: rmst2 function output function array accelerate following grid search code.","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/RMST_sim_cal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of RMST values in each group — RMST_sim_cal","text":"","code":"RMST_sim_cal(n, data_E, data_C, tau, sim_size)"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/RMST_sim_cal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of RMST values in each group — RMST_sim_cal","text":"n Sample size arm data_E Survival data experiment group generated expo_gen_2stages data_C Survival data control group generated expo_gen_2stages tau Cut-time RMST sim_size Simulation times","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/RMST_sim_cal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimation of RMST values in each group — RMST_sim_cal","text":"","code":"sim_size <- 5000  N <- 100 r <- 60 acc_time <- N / r cen_time <- 1 lambda_H1 <- 0.9 HR <- 1.7 lambda_H0 <- 0.9 * 1.7 change_time <- 1 interim <- 0.6 * acc_time n <- ceiling(N / 2) alpha <- 0.05 tau_f <- 2.5 data_C <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                             lambda = lambda_H0, dist = 'exp',                             cen_time = cen_time,arm = 0, interim = interim)     data_E_H0 <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                             lambda = lambda_H0, dist = 'exp',                             cen_time = cen_time,arm = 1, interim = interim) rmst_h0_int <- RMST_sim_cal(n = n, data_E = data_E_H0[ , c(2,3,1)],                             data_C = data_C[ , c(2,3,1)],                            tau = tau_f,sim_size = sim_size) #> Warning: executing %dopar% sequentially: no parallel backend registered #> Loading required package: survival"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/RMST_sim_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Single stage RMST test using simulation. P-value and cut off tau adjustment times — RMST_sim_test","title":"Single stage RMST test using simulation. P-value and cut off tau adjustment times — RMST_sim_test","text":"Different RMST_sim_cal, return dataframe p-value rejection times single-stage RMST test . also counts times tau adjustment (adjusted tau minimax survival time two groups) function can used compare rejection method classical RMST difference test","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/RMST_sim_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single stage RMST test using simulation. P-value and cut off tau adjustment times — RMST_sim_test","text":"","code":"RMST_sim_test(n, data_E, data_C, tau, sim_size, alpha, sided)"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/RMST_sim_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single stage RMST test using simulation. P-value and cut off tau adjustment times — RMST_sim_test","text":"n Sample size arm data_E Survival data experiment group generated expo_gen_2stages data_C Survival data control group generated expo_gen_2stages tau Prespecified cut-time RMST(used final stage) sim_size Simulation times alpha Stated type error level sided \"two_sided\" two-sided test, \"greater\" one-sided superiority test","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/RMST_sim_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single stage RMST test using simulation. P-value and cut off tau adjustment times — RMST_sim_test","text":"list following components: test_result data frame following columns: rejection proportion simulations RMST test p-value less equal alpha. tau adjustment proportion simulations tau adjustment occurred. p_value numeric vector p-values simulation.","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/RMST_sim_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single stage RMST test using simulation. P-value and cut off tau adjustment times — RMST_sim_test","text":"","code":"median_con <- 10 # month lambda_H0 <- log(2)/median_con lambda_H1 <- lambda_H0 * 0.67 sim_size <- 5000  acc_time <- 24 cen_time <- 12 tau <- 24 n <- 100   set.seed(2024)  data_C <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                     lambda = lambda_H0, dist = 'exp',                     cen_time = cen_time,arm = 0, interim = 0)[ , c(4,5,1)]     data_E_H0 <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                     lambda = lambda_H0, dist = 'exp',                     cen_time = cen_time,arm = 1, interim = 0)[ , c(4,5,1)]                     simple_rmst <- RMST_sim_test(data_C = data_C, data_E = data_E_H0,                     sim_size = sim_size, tau = tau,                     n = n, alpha = 0.05 ,sided = 'greater')  # print(simple_rmst$test_result) # print(simple_rmst$p_value)"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/adp_grid_src.html","id":null,"dir":"Reference","previous_headings":"","what":"Adaptive grid search for critical value using RMST (Simple or Sculpted) — adp_grid_src","title":"Adaptive grid search for critical value using RMST (Simple or Sculpted) — adp_grid_src","text":"function adaptive grid search RMST two-stage design one searching parameters gamma. grid search make use conditional distribution (Normal) E | D, illustrated paper. power given, function finds critical values control overall type error < alpha maximizing empirical power. power given, searches valid critical values empirical power greater specified power. power given, int_n fin_n required","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/adp_grid_src.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adaptive grid search for critical value using RMST (Simple or Sculpted) — adp_grid_src","text":"","code":"adp_grid_src(   rmst_data,   mu_cov_h0,   mu_cov_h1,   int_n,   fin_n,   sim_size,   method,   alpha,   power = NULL )"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/adp_grid_src.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adaptive grid search for critical value using RMST (Simple or Sculpted) — adp_grid_src","text":"rmst_data Combined RMST data generated RMST_sim_cal function. mu_cov_h0 Variance-covariance matrix (E1-C1, E1, E2-C2, E2) null hypothesis (H0), obtained mu_cov_mc function. mu_cov_h1 Variance-covariance matrix (E1-C1, E1, E2-C2, E2) alternative hypothesis (H1), obtained mu_cov_mc function. int_n Interim sample size (n). fin_n Total sample size (N). sim_size Number simulations perform grid search. method Method used RMST design. \"Simple\" indicates Simple RMST rejection region (D1 > m1 & D2 > m2), D = E - C RMST difference groups. \"Complex\" indicates Sculpted RMST rejection region (D1 > m1 & E1 > q1 & D2 > m2 & E2 > q2), E RMST experimental group. alpha Stated type error level. power Desired power test (optional).","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/adp_grid_src.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adaptive grid search for critical value using RMST (Simple or Sculpted) — adp_grid_src","text":"data frame following columns: m1 Critical value RMST difference first stage m2 Critical value RMST difference second stage q1 Critical value Experiment group RMST first stage q2 Critical value Experiment group RMST second stage PET0 Probability early termination H0. PET1 Probability early termination H1. alpha Empirical overall type error rate. power Empirical power test. PET Probability early termination (PET0+PET1)/2. EN0 Expected sample size H0. EN1 Expected sample size H1. EN Average expected sample size. valid critical values found, function returns data frame m1 = 0, m2 = 0, q1 = 0, q2 = 0, PET0 = 0, PET1 = 0, alpha = 0, power = 0, PET = 0, EN0 = NA, EN1 = NA, EN = NA.","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/adp_grid_src.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adaptive grid search for critical value using RMST (Simple or Sculpted) — adp_grid_src","text":"","code":"# Example usage of adp_grid_src function sim_size <- 5000  N <- 100 r <- 60 acc_time <- N / r cen_time <- 1 lambda_H1 <- 0.9 HR <- 1.7 lambda_H0 <- 0.9 * 1.7 change_time <- 1 interim <- 0.6 * acc_time n <- ceiling(N / 2) alpha <- 0.05 tau_f <- 2.5  # Generate data for control arm (C) and experimental arm (E) under H0 and H1 data_C <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                             lambda = lambda_H0, dist = 'exp',                             cen_time = cen_time, arm = 0, interim = interim) data_E_H0 <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                             lambda = lambda_H0, dist = 'exp',                            cen_time = cen_time, arm = 1, interim = interim) data_E_H1 <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                             lambda = lambda_H1, dist = 'exp',                             cen_time = cen_time, arm = 1, interim = interim)  # Calculate RMST data for interim and final stages under H0 and H1 rmst_h0_int <- RMST_sim_cal(n = n, data_E = data_E_H0[ , c(2,3,1)],                 data_C = data_C[ , c(2,3,1)], tau = interim, sim_size = sim_size) rmst_h0_fin <- RMST_sim_cal(n = n, data_E = data_E_H0[ , c(4,5,1)],                 data_C = data_C[ , c(4,5,1)], tau = tau_f, sim_size = sim_size) rmst_h1_int <- RMST_sim_cal(n = n, data_E = data_E_H1[ , c(2,3,1)],                 data_C = data_C[ , c(2,3,1)], tau = interim, sim_size = sim_size) rmst_h1_fin <- RMST_sim_cal(n = n, data_E = data_E_H1[ , c(4,5,1)],                 data_C = data_C[ , c(4,5,1)], tau = tau_f, sim_size = sim_size)  # Combine RMST data rmst_data <- rbind(rmst_h0_int, rmst_h1_int, rmst_h0_fin, rmst_h1_fin)  # Calculate variance-covariance matrices under H0 and H1 mu_cov_h0 <- mu_cov_mc(rmst_int = rmst_h0_int, rmst_fin = rmst_h0_fin, sim_size = sim_size) mu_cov_h1 <- mu_cov_mc(rmst_int = rmst_h1_int, rmst_fin = rmst_h1_fin, sim_size = sim_size)  # Perform adaptive grid search for the best RMST design best_RMST <- adp_grid_src(rmst_data = rmst_data, mu_cov_h0 = mu_cov_h0,                 mu_cov_h1 = mu_cov_h1, int_n = interim * r, fin_n = 2 * n,                 alpha = 0.05, sim_size = sim_size, method = 'Complex')"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/compare_line_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting the comparison of 3 methods — compare_line_plot","title":"Plotting the comparison of 3 methods — compare_line_plot","text":"Used draw line plot comparing three methods (2 RMST log-rank test) different scenario Input dataframe 3m_comparison output. ** order variable fixed **","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/compare_line_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting the comparison of 3 methods — compare_line_plot","text":"","code":"compare_line_plot(data, var_name)"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/compare_line_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting the comparison of 3 methods — compare_line_plot","text":"data Please make sure data structure example Github ipynb file var_name variable name shown X-axis plots","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/expo_gen_2stages.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the 2 stages survival data under exponential or piecewise exponential distribution — expo_gen_2stages","title":"Generate the 2 stages survival data under exponential or piecewise exponential distribution — expo_gen_2stages","text":"function generate exponential dist survival data 2 stages test. censoring distribution interim period different whole trail 'interim' number, returns (N * 5) array : [arm, obs_time_int, event_int, obs_time_fin, event_fin] 'interim' list c() meaning series interim timepoints, third dimension result array return survival result ith interim (N * 5)","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/expo_gen_2stages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the 2 stages survival data under exponential or piecewise exponential distribution — expo_gen_2stages","text":"","code":"expo_gen_2stages(   N,   dist,   acc_time,   cen_time,   lambda,   HR1,   HR2,   arm,   interim,   change_time )"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/expo_gen_2stages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the 2 stages survival data under exponential or piecewise exponential distribution — expo_gen_2stages","text":"N Number patients dist 'exp' exponential, 'pcw_exp' piecewise exponential acc_time Accrual time period constant rate cen_time Extra (minimum) censoring period accrual period lambda parameter exponential distribution HR1 piecewise exponential . hazard ratio change_time HR2 piecewise exponential . hazard ratio change_time arm Group label(0,1) interim Interim time point change_time piecewise exponential . time hazard ratio changes HR1 HR2","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/expo_gen_2stages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the 2 stages survival data under exponential or piecewise exponential distribution — expo_gen_2stages","text":"","code":"set.seed(2024) sim_size <- 5000 N <- 112 n <- ceiling(N / 2)  # total sample size per arm r <- 60 acc_time <- N / r cen_time <- 1 lambda_H0 <- 0.9 * 1.5 lambda_H1 <- 0.9 int_step <- 4  int_factor <- seq(0.4, 0.7, by = int_step / N)   # Each time interim sample size increase by 4 interim_list <- int_factor * acc_time  # parameter interim can be a list data_C <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time, lambda = lambda_H0,                       dist = 'exp', cen_time = cen_time, arm = 0, interim = interim_list)  # print(data_C[ , ,1])  # parameter interim is a number data_C <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time, lambda = lambda_H0,                     dist = 'exp', cen_time = cen_time, arm = 0, interim = interim_list[1])  # print(data_C)"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/find_m_logrank.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the critical value of two-stage log-rank test — find_m_logrank","title":"Find the critical value of two-stage log-rank test — find_m_logrank","text":"function performs grid search find critical values m1, m2) log-rank test two-stage design. makes use probability Prob(W1 / sigma1 > m1 & W2 / sigma2 > m2 | H0) = alpha normality Z-statistics (Kwak Jung(2017)) W / sigma estimated simulation. z-statistics can obtained using log_rank_sim function accessed via $z_stats output. power given, function finds critical values (m1, m2) control overall type error maximizing power. power given, searches valid critical values empirical power greater specified power. power given, int_n fin_n required expected sample size calculation.","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/find_m_logrank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the critical value of two-stage log-rank test — find_m_logrank","text":"","code":"find_m_logrank(   logrank_data,   corr_h0,   search_times,   int_n = NULL,   fin_n = NULL,   alpha,   sim_size,   power = NULL )"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/find_m_logrank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the critical value of two-stage log-rank test — find_m_logrank","text":"logrank_data matrix log-rank test z statistics simulation. corr_h0 numeric value representing correlation two stages, calculated sqrt(var(W1) / var(W)). search_times integer specifying number grid search iterations. int_n optional integer specifying interim sample size (required power given). fin_n optional integer specifying total sample size arms (required power given). alpha numeric value specifying significance level hypothesis testing. sim_size integer specifying number simulations perform, say 10000. power optional numeric value specifying desired power test.","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/find_m_logrank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the critical value of two-stage log-rank test — find_m_logrank","text":"data frame following columns: m1 Critical value first stage test. m2 Critical value second stage test. PET0 Probability early termination H0. PET1 Probability early termination H1. alpha Empirical overall type error rate. power Empirical power test. PET Probability early termination. EN0 Expected sample size H0. EN1 Expected sample size H1. EN Overall expected sample size. valid critical values found, function returns data frame : m1 = 0, m2 = 0, PET0 = 0, PET1 = 0, alpha = 0, power = 0, PET = 0, EN0 = NA, EN1 = NA, EN = NA.","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/find_m_logrank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the critical value of two-stage log-rank test — find_m_logrank","text":"","code":"sim_size <- 5000  N <- 100 r <- 60 acc_time <- N / r cen_time <- 1 lambda_H1 <- 0.9 HR <- 1.7 lambda_H0 <- 0.9 * 1.7 change_time <- 1 interim <- 0.6 * acc_time n <- ceiling(N / 2) alpha <- 0.05 tau_f <- 2.5  data_C <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                         lambda = lambda_H0, dist = 'exp',                         cen_time = cen_time,arm = 0, interim = interim)     data_E_H0 <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                         lambda = lambda_H0, dist = 'exp',                         cen_time = cen_time,arm = 1, interim = interim) data_E_H1 <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                         lambda = lambda_H1, dist = 'exp',                         cen_time = cen_time,arm = 1, interim = interim) lr_h0_int <- log_rank_sim(data_C = data_C[ , c(2,3,1)], data_E = data_E_H0[ , c(2,3,1)],                          sim_size =  sim_size, n = n, alpha = alpha, sided = 'greater') lr_h1_int <- log_rank_sim(data_C = data_C[ , c(2,3,1)], data_E = data_E_H1[ , c(2,3,1)],                          sim_size =  sim_size, n = n, alpha = alpha, sided = 'greater') lr_h0_fin <- log_rank_sim(data_C = data_C[ , c(4,5,1)], data_E = data_E_H0[ , c(4,5,1)],                          sim_size =  sim_size, n = n, alpha = alpha, sided = 'greater') lr_h1_fin <- log_rank_sim(data_C = data_C[ , c(4,5,1)], data_E = data_E_H1[ , c(4,5,1)],                          sim_size =  sim_size, n = n, alpha = alpha, sided = 'greater') # Get W/sigma z_stats_h1_int <- lr_h1_int$z_stats z_stats_h1_fin <- lr_h1_fin$z_stats z_stats_h0_int <- lr_h0_int$z_stats z_stats_h0_fin <- lr_h0_fin$z_stats logrank_data <- rbind(z_stats_h0_int, z_stats_h1_int, z_stats_h0_fin, z_stats_h1_fin)  corr_h0 <- sqrt(mean(lr_h0_int$var_w) / mean(lr_h0_fin$var_w))   best_lr <- find_m_logrank(logrank_data = logrank_data, search_times = 200, corr_h0 = corr_h0,                            alpha = 0.05, sim_size = sim_size)"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/log_rank_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-rank test simulation. P-value and z-statistics — log_rank_sim","title":"Log-rank test simulation. P-value and z-statistics — log_rank_sim","text":"log-rank test simulation. Single-stage p-value two-stage statistics. Return simulated type error, empirical mean variance Z-statistics log-rank test","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/log_rank_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-rank test simulation. P-value and z-statistics — log_rank_sim","text":"","code":"log_rank_sim(data_C, data_E, sim_size, n, alpha, sided)"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/log_rank_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-rank test simulation. P-value and z-statistics — log_rank_sim","text":"data_C Survival data control group generated expo_gen_2stages data_E Survival data experiment group generated expo_gen_2stages sim_size simulation times n Sample size arm alpha Stated type error level sided \"two_sided\" two-sided test, \"greater\" one-sided superiority test","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/log_rank_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-rank test simulation. P-value and z-statistics — log_rank_sim","text":"list following components: rejection proportion simulations log-rank test statistic less equal alpha. z_stats numeric vector z statistics W/sigma simulation. var_w variance statistics $W$ correlation calculation.","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/log_rank_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-rank test simulation. P-value and z-statistics — log_rank_sim","text":"","code":"sim_size <- 5000  N <- 100 r <- 60 acc_time <- N / r cen_time <- 1 lambda_H1 <- 0.9 HR <- 1.7 lambda_H0 <- 0.9 * 1.7 change_time <- 1 interim <- 0.6 * acc_time n <- ceiling(N / 2) alpha <- 0.05  data_C <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                         lambda = lambda_H0, dist = 'exp',                         cen_time = cen_time,arm = 0, interim = interim)     data_E_H0 <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                         lambda = lambda_H0, dist = 'exp',                         cen_time = cen_time,arm = 1, interim = interim) lr_h0_int <- log_rank_sim(data_C = data_C[ , c(2,3,1)], data_E = data_E_H0[ , c(2,3,1)],                          sim_size =  sim_size, n = n, alpha = alpha, sided = 'greater')                                 # print(lr_h0_int$rejection) # print(lr_h0_int$z_stats) # print(lr_h0_int$var_w)"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/mu_cov_mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean and variance estimation of RMST using Monte-Carlo — mu_cov_mc","title":"Mean and variance estimation of RMST using Monte-Carlo — mu_cov_mc","text":"function uses Monte Carlo simulation calculate variance-covariance matrix [E1-C1, E1, E2-C2, E2]. calculation formula refers Lu (2021) sequential trials. input rmst_int interim RMST data two groups (generated RMST_sim_cal). rmst_fin final RMST data two groups (generated RMST_sim_cal).","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/mu_cov_mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean and variance estimation of RMST using Monte-Carlo — mu_cov_mc","text":"","code":"mu_cov_mc(rmst_int, rmst_fin, sim_size)"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/mu_cov_mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean and variance estimation of RMST using Monte-Carlo — mu_cov_mc","text":"rmst_int matrix interim RMST data generated RMST_sim_cal function. rmst_fin matrix final stage RMST data generated RMST_sim_cal function. sim_size n integer representing number Monte Carlo simulation iterations.","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/mu_cov_mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean and variance estimation of RMST using Monte-Carlo — mu_cov_mc","text":"list following components: mu numeric vector means [mean(E1-C1), mean(E1), mean(E2-C2), mean(E2)]. sigma 4x4 variance-covariance matrix [E1-C1, E1, E2-C2, E2].","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/mu_cov_mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean and variance estimation of RMST using Monte-Carlo — mu_cov_mc","text":"","code":"# Example usage of mu_cov_mc sim_size <- 5000  N <- 100 r <- 60 acc_time <- N / r cen_time <- 1 lambda_H1 <- 0.9 HR <- 1.7 lambda_H0 <- 0.9 * 1.7 change_time <- 1 interim <- 0.6 * acc_time n <- ceiling(N / 2) alpha <- 0.05 tau_f <- 2.5  data_C <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                             lambda = lambda_H0, dist = 'exp',                             cen_time = cen_time,arm = 0, interim = interim)     data_E_H0 <- expo_gen_2stages(N = n * sim_size, acc_time = acc_time,                               lambda = lambda_H0, dist = 'exp',                               cen_time = cen_time,arm = 1, interim = interim) rmst_h0_int <- RMST_sim_cal(n = n, data_E = data_E_H0[ , c(2,3,1)],                             data_C = data_C[ , c(2,3,1)],                            tau = interim, sim_size = sim_size) rmst_h0_fin <- RMST_sim_cal(n = n, data_E = data_E_H0[ , c(4,5,1)],                             data_C = data_C[ , c(4,5,1)],                            tau = tau_f, sim_size = sim_size) mu_cov_h0 <- mu_cov_mc(rmst_int = rmst_h0_int, rmst_fin = rmst_h0_fin, sim_size = sim_size)  # print(mu_cov_h0$mu) # print(mu_cov_h0$sigma)"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/theo_RMST.html","id":null,"dir":"Reference","previous_headings":"","what":"Theoretical value of RMST (exponential distribution) — theo_RMST","title":"Theoretical value of RMST (exponential distribution) — theo_RMST","text":"Calculate theorecital RMST RSDST explicit survival function(exponential )","code":""},{"path":"https://garcia-ho.github.io/ScuRMST/reference/theo_RMST.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theoretical value of RMST (exponential distribution) — theo_RMST","text":"","code":"theo_RMST(lambda, dist, tau)"},{"path":"https://garcia-ho.github.io/ScuRMST/reference/theo_RMST.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theoretical value of RMST (exponential distribution) — theo_RMST","text":"lambda lambda parameter exponential distribution dist 'exp' now, require development distributions tau Cut-time RMST","code":""}]
